import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import { Provider } from 'react-redux';
import { store } from './state/store';

const root = ReactDOM.createRoot(
    document.getElementById('root') as HTMLElement
);

root.render(
    <Provider store={store}>
    <App />
    </Provider>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

///++++++++++++
// import axios from "axios";
// import React, { useEffect } from "react";
// import ReactDOM from "react-dom/client";
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
// import { ThunkAction, ThunkDispatch } from "redux-thunk";
// import { configureStore, combineReducers } from "@reduxjs/toolkit";
// import {AnyAction} from "redux";
// import {AppRootStateType} from "./state/store";
//
// // Types
// type CommentType = {
//     postId: string;
//     id: string;
//     name: string;
//     email: string;
//     body: string;
// };
//
// // Api
// const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.ru/api/" });
//
// const commentsAPI = {
//     getComments() {
//         return instance.get<CommentType[]>("comments");
//     },
// };
//
// // Reducer
// const initState = [] as CommentType[];
//
// type InitStateType = typeof initState;
//
// const commentsReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//     switch (action.type) {
//         case "COMMENTS/GET-COMMENTS":
//             return action.comments;
//         default:
//             return state;
//     }
// };
//
// const getCommentsAC = (comments: CommentType[]) =>
//     ({ type: "COMMENTS/GET-COMMENTS", comments }) as const;
// type ActionsType = ReturnType<typeof getCommentsAC>;
// // type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
//
// const getCommentsTC = (): ThunkAction<void, RootState, unknown, ActionsType> => (dispatch) => {
//     commentsAPI.getComments().then((res) => {
//         dispatch(getCommentsAC(res.data));
//     });
// };
//
// // Store
// const rootReducer = combineReducers({
//     comments: commentsReducer,
// });
//
// const store = configureStore({ reducer: rootReducer });
// type RootState = ReturnType<typeof store.getState>;
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
// const useAppDispatch = () => useDispatch<AppDispatch>();
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;
//
// // App
// export const App = () => {
//     const comments = useAppSelector((state) => state.comments);
//     const dispatch = useAppDispatch();
//
//     useEffect(() => {
//         dispatch(getCommentsTC());
//     }, []);
//
//     return (
//         <>
//             <h1>üìù –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</h1>
//             {comments.map((c) => {
//                 return (
//                     <div key={c.id}>
//                         <b>Comment</b>: {c.body}{" "}
//                     </div>
//                 );
//             })}
//         </>
//     );
// };
//
// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// root.render(
//     <Provider store={store}>
//         <App />
//     </Provider>,
// );

//üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ —Å—Ç–æ–∏—Ç –≤ —Ç–æ–º —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã –≤ –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–≤—ã–π —Ç–∏–ø ThunkAction<any, any, any, any>.
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ any, any, any, any —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞—Ç—å thunk creator?
// –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
//
// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: unknown status isDone void

//
//+++++++++++++++++++++
// import React from 'react'
// import ReactDOM from 'react-dom/client';
//
// !!!!!!!!!!!!!!!!!!!dispatch, getState
// const thunkCreator = () => (dispatch: any, action: any) => {
//     // —Åode...
// }
//
//
// // App
// const App = () => {
//     return (
//         <>
//             <h1>–í —ç—Ç–æ–º –∑–∞–¥–∞–Ω–∏–∏ —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —ç–∫—Ä–∞–Ω –Ω–µ –Ω—É–∂–Ω–æ. –ù–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è üòà</h1>
//             <p>–ß–∏—Ç–∞–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –∑–∞–¥–∞–Ω–∏—é</p>
//         </>
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<App/>)
    // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –í–º–µ—Å—Ç–æ XXX –∏ YYY —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –Ω–∞–ø–∏—à–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ —Å–∞–Ω–∫—É.
//
// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: useCallback state
// !!!!!!!!!!!!!!!!!!!dispatch, getState


